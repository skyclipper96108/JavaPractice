package sort;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class SortingHelper {
	public SortingHelper() {}
	public static <E extends Comparable<E>> boolean isSorted(E[] arr) {
		for(int i=1; i<arr.length; i++)
			if(arr[i-1].compareTo(arr[i])>0)
				return false;
		return true;
	}
	
	public static <E extends Comparable<E>>void sortTest(String sortname, E[] arr) throws ClassNotFoundException, NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
		long startTime = System.nanoTime();
		Class<?> sortType =Class.forName("sort."+sortname);
		System.out.println(sortType.hashCode());
		System.out.println(Class.forName("sort.SelectionSort").hashCode());
		Method[] methods = sortType.getMethods();

        for (Method method : methods) {
            System.out.println(method);
        }
		Method sort = sortType.getMethod("sort");
		System.out.println(sort);
	    sort.invoke(arr);
		long endTime = System.nanoTime();
		double time = (endTime-startTime)/1000000000.0;
		if( !SortingHelper.isSorted(arr))
			throw new RuntimeException(sortname+" failed");
		System.out.println(String.format("%s, n=%d, time: %f s",sortname, arr.length,time));
	}
}
